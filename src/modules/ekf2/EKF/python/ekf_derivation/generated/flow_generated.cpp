// X Axis Equations
// Sub Expressions
const float HK0 = -Tbs(1,0)*q2 + Tbs(1,1)*q1 + Tbs(1,2)*q0;
const float HK1 = Tbs(1,0)*q3 + Tbs(1,1)*q0 - Tbs(1,2)*q1;
const float HK2 = Tbs(1,0)*q0 - Tbs(1,1)*q3 + Tbs(1,2)*q2;
const float HK3 = q0*q1;
const float HK4 = q2*q3;
const float HK5 = HK3 + HK4;
const float HK6 = q0*q2;
const float HK7 = q1*q3;
const float HK8 = HK6 - HK7;
const float HK9 = powf(q3, 2);
const float HK10 = powf(q2, 2);
const float HK11 = -HK10;
const float HK12 = powf(q0, 2);
const float HK13 = powf(q1, 2);
const float HK14 = HK12 - HK13;
const float HK15 = HK11 + HK14 + HK9;
const float HK16 = HK15*Tbs(2,2) + 2*HK5*Tbs(2,1) - 2*HK8*Tbs(2,0);
const float HK17 = 2*Tbs(1,1);
const float HK18 = 2*Tbs(1,0);
const float HK19 = HK15*Tbs(1,2) + HK17*HK5 - HK18*HK8;
const float HK20 = q0*q3;
const float HK21 = q1*q2;
const float HK22 = 2*Tbs(1,2);
const float HK23 = -HK9;
const float HK24 = HK18*(HK20 + HK21) - HK22*(HK3 - HK4) + Tbs(1,1)*(HK10 + HK14 + HK23);
const float HK25 = -HK17*(HK20 - HK21) + HK22*(HK6 + HK7) + Tbs(1,0)*(HK11 + HK12 + HK13 + HK23);
const float HK26 = HK19*vd + HK24*ve + HK25*vn;
const float HK27 = HK16*(HK0*vd + HK1*ve + HK2*vn) + HK26*(-Tbs(2,0)*q2 + Tbs(2,1)*q1 + Tbs(2,2)*q0);
const float HK28 = pd - ptd;
const float HK29 = 1.0F/HK28;
const float HK30 = 2*HK29;
const float HK31 = Tbs(1,0)*q1 + Tbs(1,1)*q2 + Tbs(1,2)*q3;
const float HK32 = HK16*(-HK0*ve + HK1*vd + HK31*vn) + HK26*(Tbs(2,0)*q3 + Tbs(2,1)*q0 - Tbs(2,2)*q1);
const float HK33 = -HK16*(HK0*vn - HK2*vd + HK31*ve) + HK26*(Tbs(2,0)*q0 - Tbs(2,1)*q3 + Tbs(2,2)*q2);
const float HK34 = HK16*(-HK1*vn + HK2*ve + HK31*vd) + HK26*(Tbs(2,0)*q1 + Tbs(2,1)*q2 + Tbs(2,2)*q3);
const float HK35 = HK16*HK29;
const float HK36 = powf(HK28, -2);
const float HK37 = HK16*HK26;
const float HK38 = HK36*HK37;
const float HK39 = HK16*HK25;
const float HK40 = HK39*P(0,4);
const float HK41 = HK16*HK24;
const float HK42 = HK41*P(0,5);
const float HK43 = HK16*HK19;
const float HK44 = HK43*P(0,6);
const float HK45 = HK26*HK35;
const float HK46 = HK45*P(0,24);
const float HK47 = HK45*P(0,9);
const float HK48 = 2*HK34;
const float HK49 = HK48*P(0,3);
const float HK50 = 2*HK27;
const float HK51 = HK50*P(0,0);
const float HK52 = 2*HK32;
const float HK53 = HK52*P(0,1);
const float HK54 = 2*HK33;
const float HK55 = HK54*P(0,2);
const float HK56 = HK39*P(4,6);
const float HK57 = HK41*P(5,6);
const float HK58 = HK43*P(6,6);
const float HK59 = HK45*P(6,9);
const float HK60 = HK45*P(6,24);
const float HK61 = HK48*P(3,6);
const float HK62 = HK50*P(0,6);
const float HK63 = HK52*P(1,6);
const float HK64 = HK54*P(2,6);
const float HK65 = HK39*P(4,5);
const float HK66 = HK41*P(5,5);
const float HK67 = HK43*P(5,6);
const float HK68 = HK45*P(5,9);
const float HK69 = HK45*P(5,24);
const float HK70 = HK48*P(3,5);
const float HK71 = HK50*P(0,5);
const float HK72 = HK52*P(1,5);
const float HK73 = HK54*P(2,5);
const float HK74 = HK39*P(4,4);
const float HK75 = HK41*P(4,5);
const float HK76 = HK43*P(4,6);
const float HK77 = HK45*P(4,9);
const float HK78 = HK45*P(4,24);
const float HK79 = HK48*P(3,4);
const float HK80 = HK50*P(0,4);
const float HK81 = HK52*P(1,4);
const float HK82 = HK54*P(2,4);
const float HK83 = HK39*P(4,24);
const float HK84 = HK41*P(5,24);
const float HK85 = HK43*P(6,24);
const float HK86 = HK45*P(9,24);
const float HK87 = HK45*P(24,24);
const float HK88 = HK48*P(3,24);
const float HK89 = HK50*P(0,24);
const float HK90 = HK52*P(1,24);
const float HK91 = HK54*P(2,24);
const float HK92 = HK37/powf(HK28, 3);
const float HK93 = HK39*P(4,9);
const float HK94 = HK41*P(5,9);
const float HK95 = HK43*P(6,9);
const float HK96 = HK45*P(9,9);
const float HK97 = -HK86;
const float HK98 = HK48*P(3,9);
const float HK99 = HK50*P(0,9);
const float HK100 = HK52*P(1,9);
const float HK101 = HK54*P(2,9);
const float HK102 = HK39*P(3,4);
const float HK103 = HK41*P(3,5);
const float HK104 = HK43*P(3,6);
const float HK105 = HK45*P(3,9);
const float HK106 = HK45*P(3,24);
const float HK107 = HK48*P(3,3);
const float HK108 = HK50*P(0,3);
const float HK109 = HK52*P(1,3);
const float HK110 = HK54*P(2,3);
const float HK111 = HK39*P(1,4);
const float HK112 = HK41*P(1,5);
const float HK113 = HK43*P(1,6);
const float HK114 = HK45*P(1,9);
const float HK115 = HK45*P(1,24);
const float HK116 = HK48*P(1,3);
const float HK117 = HK50*P(0,1);
const float HK118 = HK52*P(1,1);
const float HK119 = HK54*P(1,2);
const float HK120 = HK39*P(2,4);
const float HK121 = HK41*P(2,5);
const float HK122 = HK43*P(2,6);
const float HK123 = HK45*P(2,9);
const float HK124 = HK45*P(2,24);
const float HK125 = HK48*P(2,3);
const float HK126 = HK50*P(0,2);
const float HK127 = HK52*P(1,2);
const float HK128 = HK54*P(2,2);
const float HK129 = HK29/(HK36*HK39*(-HK74 - HK75 - HK76 + HK77 - HK78 - HK79 - HK80 - HK81 + HK82) + HK36*HK41*(-HK65 - HK66 - HK67 + HK68 - HK69 - HK70 - HK71 - HK72 + HK73) + HK36*HK43*(-HK56 - HK57 - HK58 + HK59 - HK60 - HK61 - HK62 - HK63 + HK64) + HK36*HK48*(-HK102 - HK103 - HK104 + HK105 - HK106 - HK107 - HK108 - HK109 + HK110) + HK36*HK50*(-HK40 - HK42 - HK44 - HK46 + HK47 - HK49 - HK51 - HK53 + HK55) + HK36*HK52*(-HK111 - HK112 - HK113 + HK114 - HK115 - HK116 - HK117 - HK118 + HK119) - HK36*HK54*(-HK120 - HK121 - HK122 + HK123 - HK124 - HK125 - HK126 - HK127 + HK128) - HK92*(-HK100 + HK101 - HK93 - HK94 - HK95 + HK96 + HK97 - HK98 - HK99) + HK92*(-HK83 - HK84 - HK85 + HK86 - HK87 - HK88 - HK89 - HK90 + HK91) - R_LOS);


// Observation Jacobians
Hfusion.at<0>() = -HK27*HK30;
Hfusion.at<1>() = -HK30*HK32;
Hfusion.at<2>() = HK30*HK33;
Hfusion.at<3>() = -HK30*HK34;
Hfusion.at<4>() = -HK25*HK35;
Hfusion.at<5>() = -HK24*HK35;
Hfusion.at<6>() = -HK19*HK35;
Hfusion.at<7>() = 0;
Hfusion.at<8>() = 0;
Hfusion.at<9>() = HK38;
Hfusion.at<10>() = 0;
Hfusion.at<11>() = 0;
Hfusion.at<12>() = 0;
Hfusion.at<13>() = 0;
Hfusion.at<14>() = 0;
Hfusion.at<15>() = 0;
Hfusion.at<16>() = 0;
Hfusion.at<17>() = 0;
Hfusion.at<18>() = 0;
Hfusion.at<19>() = 0;
Hfusion.at<20>() = 0;
Hfusion.at<21>() = 0;
Hfusion.at<22>() = 0;
Hfusion.at<23>() = 0;
Hfusion.at<24>() = -HK38;


// Kalman gains
Kfusion(0) = HK129*(HK40 + HK42 + HK44 + HK46 - HK47 + HK49 + HK51 + HK53 - HK55);
Kfusion(1) = HK129*(HK111 + HK112 + HK113 - HK114 + HK115 + HK116 + HK117 + HK118 - HK119);
Kfusion(2) = HK129*(HK120 + HK121 + HK122 - HK123 + HK124 + HK125 + HK126 + HK127 - HK128);
Kfusion(3) = HK129*(HK102 + HK103 + HK104 - HK105 + HK106 + HK107 + HK108 + HK109 - HK110);
Kfusion(4) = HK129*(HK74 + HK75 + HK76 - HK77 + HK78 + HK79 + HK80 + HK81 - HK82);
Kfusion(5) = HK129*(HK65 + HK66 + HK67 - HK68 + HK69 + HK70 + HK71 + HK72 - HK73);
Kfusion(6) = HK129*(HK56 + HK57 + HK58 - HK59 + HK60 + HK61 + HK62 + HK63 - HK64);
Kfusion(7) = HK129*(HK39*P(4,7) + HK41*P(5,7) + HK43*P(6,7) + HK45*P(7,24) - HK45*P(7,9) + HK48*P(3,7) + HK50*P(0,7) + HK52*P(1,7) - HK54*P(2,7));
Kfusion(8) = HK129*(HK39*P(4,8) + HK41*P(5,8) + HK43*P(6,8) + HK45*P(8,24) - HK45*P(8,9) + HK48*P(3,8) + HK50*P(0,8) + HK52*P(1,8) - HK54*P(2,8));
Kfusion(9) = HK129*(HK100 - HK101 + HK86 + HK93 + HK94 + HK95 - HK96 + HK98 + HK99);
Kfusion(10) = HK129*(HK39*P(4,10) + HK41*P(5,10) + HK43*P(6,10) + HK45*P(10,24) - HK45*P(9,10) + HK48*P(3,10) + HK50*P(0,10) + HK52*P(1,10) - HK54*P(2,10));
Kfusion(11) = HK129*(HK39*P(4,11) + HK41*P(5,11) + HK43*P(6,11) + HK45*P(11,24) - HK45*P(9,11) + HK48*P(3,11) + HK50*P(0,11) + HK52*P(1,11) - HK54*P(2,11));
Kfusion(12) = HK129*(HK39*P(4,12) + HK41*P(5,12) + HK43*P(6,12) + HK45*P(12,24) - HK45*P(9,12) + HK48*P(3,12) + HK50*P(0,12) + HK52*P(1,12) - HK54*P(2,12));
Kfusion(13) = HK129*(HK39*P(4,13) + HK41*P(5,13) + HK43*P(6,13) + HK45*P(13,24) - HK45*P(9,13) + HK48*P(3,13) + HK50*P(0,13) + HK52*P(1,13) - HK54*P(2,13));
Kfusion(14) = HK129*(HK39*P(4,14) + HK41*P(5,14) + HK43*P(6,14) + HK45*P(14,24) - HK45*P(9,14) + HK48*P(3,14) + HK50*P(0,14) + HK52*P(1,14) - HK54*P(2,14));
Kfusion(15) = HK129*(HK39*P(4,15) + HK41*P(5,15) + HK43*P(6,15) + HK45*P(15,24) - HK45*P(9,15) + HK48*P(3,15) + HK50*P(0,15) + HK52*P(1,15) - HK54*P(2,15));
Kfusion(16) = HK129*(HK39*P(4,16) + HK41*P(5,16) + HK43*P(6,16) + HK45*P(16,24) - HK45*P(9,16) + HK48*P(3,16) + HK50*P(0,16) + HK52*P(1,16) - HK54*P(2,16));
Kfusion(17) = HK129*(HK39*P(4,17) + HK41*P(5,17) + HK43*P(6,17) + HK45*P(17,24) - HK45*P(9,17) + HK48*P(3,17) + HK50*P(0,17) + HK52*P(1,17) - HK54*P(2,17));
Kfusion(18) = HK129*(HK39*P(4,18) + HK41*P(5,18) + HK43*P(6,18) + HK45*P(18,24) - HK45*P(9,18) + HK48*P(3,18) + HK50*P(0,18) + HK52*P(1,18) - HK54*P(2,18));
Kfusion(19) = HK129*(HK39*P(4,19) + HK41*P(5,19) + HK43*P(6,19) + HK45*P(19,24) - HK45*P(9,19) + HK48*P(3,19) + HK50*P(0,19) + HK52*P(1,19) - HK54*P(2,19));
Kfusion(20) = HK129*(HK39*P(4,20) + HK41*P(5,20) + HK43*P(6,20) + HK45*P(20,24) - HK45*P(9,20) + HK48*P(3,20) + HK50*P(0,20) + HK52*P(1,20) - HK54*P(2,20));
Kfusion(21) = HK129*(HK39*P(4,21) + HK41*P(5,21) + HK43*P(6,21) + HK45*P(21,24) - HK45*P(9,21) + HK48*P(3,21) + HK50*P(0,21) + HK52*P(1,21) - HK54*P(2,21));
Kfusion(22) = HK129*(HK39*P(4,22) + HK41*P(5,22) + HK43*P(6,22) + HK45*P(22,24) - HK45*P(9,22) + HK48*P(3,22) + HK50*P(0,22) + HK52*P(1,22) - HK54*P(2,22));
Kfusion(23) = HK129*(HK39*P(4,23) + HK41*P(5,23) + HK43*P(6,23) + HK45*P(23,24) - HK45*P(9,23) + HK48*P(3,23) + HK50*P(0,23) + HK52*P(1,23) - HK54*P(2,23));
Kfusion(24) = HK129*(HK83 + HK84 + HK85 + HK87 + HK88 + HK89 + HK90 - HK91 + HK97);


// Y Axis Equations
// Sub Expressions
const float HK0 = -Tbs(0,0)*q2 + Tbs(0,1)*q1 + Tbs(0,2)*q0;
const float HK1 = Tbs(0,0)*q3 + Tbs(0,1)*q0 - Tbs(0,2)*q1;
const float HK2 = Tbs(0,0)*q0;
const float HK3 = Tbs(0,2)*q2;
const float HK4 = Tbs(0,1)*q3;
const float HK5 = HK2 + HK3 - HK4;
const float HK6 = q0*q1;
const float HK7 = q2*q3;
const float HK8 = HK6 + HK7;
const float HK9 = q0*q2;
const float HK10 = q1*q3;
const float HK11 = -HK10 + HK9;
const float HK12 = powf(q3, 2);
const float HK13 = powf(q2, 2);
const float HK14 = -HK13;
const float HK15 = powf(q0, 2);
const float HK16 = powf(q1, 2);
const float HK17 = HK15 - HK16;
const float HK18 = HK12 + HK14 + HK17;
const float HK19 = -2*HK11*Tbs(2,0) + HK18*Tbs(2,2) + 2*HK8*Tbs(2,1);
const float HK20 = 2*Tbs(0,0);
const float HK21 = 2*Tbs(0,1);
const float HK22 = HK18*Tbs(0,2) + HK21*HK8;
const float HK23 = -HK11*HK20 + HK22;
const float HK24 = 2*Tbs(0,2);
const float HK25 = -HK12;
const float HK26 = q0*q3;
const float HK27 = q1*q2;
const float HK28 = HK20*(HK26 + HK27) + Tbs(0,1)*(HK13 + HK17 + HK25);
const float HK29 = -HK24*(HK6 - HK7) + HK28;
const float HK30 = HK24*(HK10 + HK9) + Tbs(0,0)*(HK14 + HK15 + HK16 + HK25);
const float HK31 = -HK21*(HK26 - HK27) + HK30;
const float HK32 = HK23*vd + HK29*ve + HK31*vn;
const float HK33 = HK19*(HK0*vd + HK1*ve + HK5*vn) + HK32*(-Tbs(2,0)*q2 + Tbs(2,1)*q1 + Tbs(2,2)*q0);
const float HK34 = pd - ptd;
const float HK35 = 1.0F/HK34;
const float HK36 = 2*HK35;
const float HK37 = Tbs(0,0)*q1 + Tbs(0,1)*q2 + Tbs(0,2)*q3;
const float HK38 = HK19*(-HK0*ve + HK1*vd + HK37*vn) + HK32*(Tbs(2,0)*q3 + Tbs(2,1)*q0 - Tbs(2,2)*q1);
const float HK39 = HK19*(HK0*vn + HK37*ve + vd*(-HK2 - HK3 + HK4));
const float HK40 = (Tbs(2,0)*q0 - Tbs(2,1)*q3 + Tbs(2,2)*q2)*(vd*(HK20*(HK10 - HK9) + HK22) + ve*(HK24*(-HK6 + HK7) + HK28) + vn*(HK21*(-HK26 + HK27) + HK30));
const float HK41 = HK19*(-HK1*vn + HK37*vd + HK5*ve) + HK32*(Tbs(2,0)*q1 + Tbs(2,1)*q2 + Tbs(2,2)*q3);
const float HK42 = HK19*HK35;
const float HK43 = powf(HK34, -2);
const float HK44 = HK19*HK32;
const float HK45 = HK43*HK44;
const float HK46 = HK19*HK31;
const float HK47 = HK19*HK29;
const float HK48 = HK19*HK23;
const float HK49 = HK32*HK42;
const float HK50 = 2*HK41;
const float HK51 = 2*HK33;
const float HK52 = 2*HK38;
const float HK53 = -2*HK39 + 2*HK40;
const float HK54 = HK46*P(0,4) + HK47*P(0,5) + HK48*P(0,6) + HK49*P(0,24) - HK49*P(0,9) + HK50*P(0,3) + HK51*P(0,0) + HK52*P(0,1) - HK53*P(0,2);
const float HK55 = HK46*P(4,6) + HK47*P(5,6) + HK48*P(6,6) + HK49*P(6,24) - HK49*P(6,9) + HK50*P(3,6) + HK51*P(0,6) + HK52*P(1,6) - HK53*P(2,6);
const float HK56 = HK46*P(4,5) + HK47*P(5,5) + HK48*P(5,6) + HK49*P(5,24) - HK49*P(5,9) + HK50*P(3,5) + HK51*P(0,5) + HK52*P(1,5) - HK53*P(2,5);
const float HK57 = HK46*P(4,4) + HK47*P(4,5) + HK48*P(4,6) + HK49*P(4,24) - HK49*P(4,9) + HK50*P(3,4) + HK51*P(0,4) + HK52*P(1,4) - HK53*P(2,4);
const float HK58 = HK49*P(9,24);
const float HK59 = HK46*P(4,24) + HK47*P(5,24) + HK48*P(6,24) + HK49*P(24,24) + HK50*P(3,24) + HK51*P(0,24) + HK52*P(1,24) - HK53*P(2,24) - HK58;
const float HK60 = HK44/powf(HK34, 3);
const float HK61 = HK46*P(4,9) + HK47*P(5,9) + HK48*P(6,9) - HK49*P(9,9) + HK50*P(3,9) + HK51*P(0,9) + HK52*P(1,9) - HK53*P(2,9) + HK58;
const float HK62 = HK46*P(3,4) + HK47*P(3,5) + HK48*P(3,6) + HK49*P(3,24) - HK49*P(3,9) + HK50*P(3,3) + HK51*P(0,3) + HK52*P(1,3) - HK53*P(2,3);
const float HK63 = HK46*P(1,4) + HK47*P(1,5) + HK48*P(1,6) + HK49*P(1,24) - HK49*P(1,9) + HK50*P(1,3) + HK51*P(0,1) + HK52*P(1,1) - HK53*P(1,2);
const float HK64 = HK46*P(2,4) + HK47*P(2,5) + HK48*P(2,6) + HK49*P(2,24) - HK49*P(2,9) + HK50*P(2,3) + HK51*P(0,2) + HK52*P(1,2) - HK53*P(2,2);
const float HK65 = HK35/(HK43*HK46*HK57 + HK43*HK47*HK56 + HK43*HK48*HK55 + HK43*HK50*HK62 + HK43*HK51*HK54 + HK43*HK52*HK63 - HK43*HK53*HK64 + HK59*HK60 - HK60*HK61 + R_LOS);


// Observation Jacobians
Hfusion.at<0>() = HK33*HK36;
Hfusion.at<1>() = HK36*HK38;
Hfusion.at<2>() = HK36*(HK39 - HK40);
Hfusion.at<3>() = HK36*HK41;
Hfusion.at<4>() = HK31*HK42;
Hfusion.at<5>() = HK29*HK42;
Hfusion.at<6>() = HK23*HK42;
Hfusion.at<7>() = 0;
Hfusion.at<8>() = 0;
Hfusion.at<9>() = -HK45;
Hfusion.at<10>() = 0;
Hfusion.at<11>() = 0;
Hfusion.at<12>() = 0;
Hfusion.at<13>() = 0;
Hfusion.at<14>() = 0;
Hfusion.at<15>() = 0;
Hfusion.at<16>() = 0;
Hfusion.at<17>() = 0;
Hfusion.at<18>() = 0;
Hfusion.at<19>() = 0;
Hfusion.at<20>() = 0;
Hfusion.at<21>() = 0;
Hfusion.at<22>() = 0;
Hfusion.at<23>() = 0;
Hfusion.at<24>() = HK45;


// Kalman gains
Kfusion(0) = HK54*HK65;
Kfusion(1) = HK63*HK65;
Kfusion(2) = HK64*HK65;
Kfusion(3) = HK62*HK65;
Kfusion(4) = HK57*HK65;
Kfusion(5) = HK56*HK65;
Kfusion(6) = HK55*HK65;
Kfusion(7) = HK65*(HK46*P(4,7) + HK47*P(5,7) + HK48*P(6,7) + HK49*P(7,24) - HK49*P(7,9) + HK50*P(3,7) + HK51*P(0,7) + HK52*P(1,7) - HK53*P(2,7));
Kfusion(8) = HK65*(HK46*P(4,8) + HK47*P(5,8) + HK48*P(6,8) + HK49*P(8,24) - HK49*P(8,9) + HK50*P(3,8) + HK51*P(0,8) + HK52*P(1,8) - HK53*P(2,8));
Kfusion(9) = HK61*HK65;
Kfusion(10) = HK65*(HK46*P(4,10) + HK47*P(5,10) + HK48*P(6,10) + HK49*P(10,24) - HK49*P(9,10) + HK50*P(3,10) + HK51*P(0,10) + HK52*P(1,10) - HK53*P(2,10));
Kfusion(11) = HK65*(HK46*P(4,11) + HK47*P(5,11) + HK48*P(6,11) + HK49*P(11,24) - HK49*P(9,11) + HK50*P(3,11) + HK51*P(0,11) + HK52*P(1,11) - HK53*P(2,11));
Kfusion(12) = HK65*(HK46*P(4,12) + HK47*P(5,12) + HK48*P(6,12) + HK49*P(12,24) - HK49*P(9,12) + HK50*P(3,12) + HK51*P(0,12) + HK52*P(1,12) - HK53*P(2,12));
Kfusion(13) = HK65*(HK46*P(4,13) + HK47*P(5,13) + HK48*P(6,13) + HK49*P(13,24) - HK49*P(9,13) + HK50*P(3,13) + HK51*P(0,13) + HK52*P(1,13) - HK53*P(2,13));
Kfusion(14) = HK65*(HK46*P(4,14) + HK47*P(5,14) + HK48*P(6,14) + HK49*P(14,24) - HK49*P(9,14) + HK50*P(3,14) + HK51*P(0,14) + HK52*P(1,14) - HK53*P(2,14));
Kfusion(15) = HK65*(HK46*P(4,15) + HK47*P(5,15) + HK48*P(6,15) + HK49*P(15,24) - HK49*P(9,15) + HK50*P(3,15) + HK51*P(0,15) + HK52*P(1,15) - HK53*P(2,15));
Kfusion(16) = HK65*(HK46*P(4,16) + HK47*P(5,16) + HK48*P(6,16) + HK49*P(16,24) - HK49*P(9,16) + HK50*P(3,16) + HK51*P(0,16) + HK52*P(1,16) - HK53*P(2,16));
Kfusion(17) = HK65*(HK46*P(4,17) + HK47*P(5,17) + HK48*P(6,17) + HK49*P(17,24) - HK49*P(9,17) + HK50*P(3,17) + HK51*P(0,17) + HK52*P(1,17) - HK53*P(2,17));
Kfusion(18) = HK65*(HK46*P(4,18) + HK47*P(5,18) + HK48*P(6,18) + HK49*P(18,24) - HK49*P(9,18) + HK50*P(3,18) + HK51*P(0,18) + HK52*P(1,18) - HK53*P(2,18));
Kfusion(19) = HK65*(HK46*P(4,19) + HK47*P(5,19) + HK48*P(6,19) + HK49*P(19,24) - HK49*P(9,19) + HK50*P(3,19) + HK51*P(0,19) + HK52*P(1,19) - HK53*P(2,19));
Kfusion(20) = HK65*(HK46*P(4,20) + HK47*P(5,20) + HK48*P(6,20) + HK49*P(20,24) - HK49*P(9,20) + HK50*P(3,20) + HK51*P(0,20) + HK52*P(1,20) - HK53*P(2,20));
Kfusion(21) = HK65*(HK46*P(4,21) + HK47*P(5,21) + HK48*P(6,21) + HK49*P(21,24) - HK49*P(9,21) + HK50*P(3,21) + HK51*P(0,21) + HK52*P(1,21) - HK53*P(2,21));
Kfusion(22) = HK65*(HK46*P(4,22) + HK47*P(5,22) + HK48*P(6,22) + HK49*P(22,24) - HK49*P(9,22) + HK50*P(3,22) + HK51*P(0,22) + HK52*P(1,22) - HK53*P(2,22));
Kfusion(23) = HK65*(HK46*P(4,23) + HK47*P(5,23) + HK48*P(6,23) + HK49*P(23,24) - HK49*P(9,23) + HK50*P(3,23) + HK51*P(0,23) + HK52*P(1,23) - HK53*P(2,23));
Kfusion(24) = HK59*HK65;
